{
  "name": "json-tools",
  "version": "0.2.27",
  "description": "library to work with json",
  "main": "api.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/drdrej/nodejs-json-get.git"
  },
  "author": {
    "name": "drdrej"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/drdrej/nodejs-json-get/issues"
  },
  "dependencies": {
    "underscore": "~1.5.2",
    "JSONSelect": "~0.4.0",
    "string": "~1.8.0",
    "event-stream": "~3.1.1",
    "wrench": "~1.5.8"
  },
  "readme": "json-tools\n===============\n\n\njson-tools is a simple js-lib to simplify access to elements in json.\nit should help to do some basic tasks with json-structure like rendering, selection, transformation.\n\n\n     development: active\n     version: 0.2.27\n     author: A.siebert (drdrej)\n\n## Inspired by following concepts:\n* model driven architecture\n* fluent APIs\n* domain specific languages\n\n\n## Third-Party Code\nTo build this product I've used some open-source stuff:\n* event-stream\n* JSONSelect\n* string\n* underscore\n* wrench\n\nI like to say thank you to authors of this useful stuff!\n\n\n## When and where to use\n...\n\n## Usage\n\nFirst of all you need to install an npm module.\n\n```\n     > npm install json-tools\n```\n     \nIn the next step you need to load the npm-module.\n\n```javascript\n   var tools = require( 'json-tools' );\n\n```\n\nNow you can work with these json-tools. A tools-instance provides some methods to work with json:\n\n     1. asText( value, options)\n     2. selectable( object )\n     3. each( fnc )\n     4. query( json, [options] )\n\nF.e. if you like to make a selection on JSON-Object, then you need to create a selectable\nand then you can use css-selectors to querying a structure.\n\n**Example:** \n```javascript\n   var myObj = {\n      root: {\n         persons : [\n\n       {\n          name: \"xyz\",\n          age: 13 \n       },\n       \n       {\n          name: \"abz\",\n          age: 23 \n       },\n       \n       {\n          name: \"cde\",\n          age: 33 \n       }  \n   ]}};\n\n   // creates a selectable:\n   var selectable = tools.selectable( myObj );\n   \n   // return the first element in the result:\n   console.log( selectable.first( \".root > .persons > *\" ) );\n   \n   // return string/text of a selection\n   console.log( selectable.text( \".root > .persons > * > .name\" ) );\n\n```\n\nYou can also iterate over selection in callback-style.\n\n**Example:** \n```javascript\n\n   selectable.each( \".root > .persons > *\", function(element) {\n        // passed \"element\" is also a selectable.\n        // so you have same methods in selected element (text, first, each)\n        \n        // different ways to work with content\n        // ------------------------------------\n        \n        // access to json-sub-structure:\n        console.log( element.json.name );\n   \n        // access to json-sub-structure:\n        console.log( element.text( \".name\" ) );\n   });\n\n```\n\nGood to know, that you can also use the each() method on selected element.\n**Example:**\n```javascript\n\n   selectable.each( query, function(element) {\n        element.each( subQuery, function( subElement ) {\n            ...\n        });\n   });\n\n```\n\n### Transformations\n\nAPI supports now transformations. To exec a transformation you need to create a query object and call select()\nand transform() functions.\n\n**Example:**\n```javascript\n\n   var tools = require( 'json-tools' );\n   tools.query( json )\n        .select( '.root > .persons > *' )\n        .transform( function( element ){\n               // do some transformation with element\n               var result = ...\n\n               // returns transformed element.\n               return result;\n   });\n```\n\nYou can easyly render and dump a json-element to a file like in the following example:\n\n```javascript\n   var tools = require( 'json-tools' );\n   tools.query( json )\n        .select( '.root > .persons > *' )\n        .transform( function( element ){\n               ...\n        })\n        .dump( \"c:\\\\temp\\\\test\\\\<%= name %>.json\" );\n```\n\nIn the above example dump-function will use the passed path-template and json-data\nto render the path and dump json-data into this file.\n\nAnother nice short-cut is a transform( string:path ) and write external transformations.\n\nFirst of all you can move above used transformation-function to another file. F.e. create a folder **\"/transform/\"**\nand place this file **\"myTransformation.js\"** into this folder:\n\n```javascript\n\n   // this is a transformation-file\n   exports.transform = function( element ){\n               ...\n   };\n```\n\nModify your code  to use this external transformation:\n\n```javascript\n   var tools = require( 'json-tools' );\n   tools.query( json )\n        .select( '.root > .persons > *' )\n        .transform( __dirname + '/transform/myTransformation.js' )\n        .dump( \"c:\\\\temp\\\\test\\\\<%= name %>.json\" );\n```\n**Important:** current version supports only absolute path and do not check the path-var.\n\n\n### Merge and Split\n\nSometimes you need to split a passed object into a bunch of objects. you can do it with the split() function\nand asArray() catch a stream of objects and build an array. path this array in the stream to the next handler.\n\n**Important:**  current version of slit() supports only arrays.\n\n\n*TODO: need examples*\n\n\n### Render content\n\n```javascript\n   var tools = require( 'json-tools' );\n   tools.query( json )\n        .select( '.root > .persons > *' )\n        .transform( function( element ){\n               ...\n        })\n        .render( 'test content rendered with <%= name %> and wrote to field $rendered', '$rendered' )\n```\n\nIn this example the render()-function creates field named $rendered in passed object, and fill this field with rendered value, based on passed template and object (in the stream).\n\n\n\n## API\n\n\n\n### asText\nExtract text from structure.\n\n\n\n### selectable\nExtends passed object with methods to query and render this object.\n\n#### text\nfunction (path, defVal, shouldTrim)\n\n#### exists\nfunction (path)\n\n#### first\nfunction (path)\n\n#### each\nfunction (path, step)\n\n#### render( template )\n\n#### put( key, value )\n\n#### list( path, template, delim )\n\nThis method gives you a way to render object.\nCurrent implementation uses Underscore.templates.\n\n* **template**: Path underscore-template or path to existing template.\n\n**Example:**\n```javascript\n   var tools = require( 'json-tools' );\n   var selectable = tools.selectable( json );\n   var rendered = selectable.render( \"<%= text('.field') %>\" )\n```\n\n\n\n\n### json\nCreates a stream-pipe and forward passed json-object into this stream.\n\n#### select( String:cssPath )\n\nSelects elements on passed Object. Result is an array of elements. Every element in array will be passed in the pipe to the next stream.\n\n##### Parameters:\n* **cssPath** of type String.\n\n\n**Example:**\n```javascript\n   var obj = { ... };\n   var tools = require( 'json-tools' );\n\n   // select a field:\n   var rendered = tools.json( obj ).select('.field' );\n```\n\n#### render( )\n#### done( )\n#### render\n#### dump\n#### transform\n#### validate\n#### asArray\n#### asSelectable\n#### split\n#### done\n\n\n\n## History\n\n### until version 0.2.12\n- Only basic implementation.\n- Not tested well - need more tests.\n- use it actively in my other projects.\n\nI found in some situations I need to redesign json-tools.\nI've started to change the api(). Release 0.3.x should have a valid and sable api.\n\n### version 0.3.x\n\n\n## License\nThis project is open-source and is distributed under MIT License (check the LICENSE-file).\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Andreas Siebert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nwrite code & have fun! ---- A. Siebert\n",
  "readmeFilename": "README.md",
  "_id": "json-tools@0.2.27",
  "_from": "json-tools@"
}
